using UnityEngine;
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class SetObjectStatesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SetObjectStates>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SetObjectStatesFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "objectType", 0 },
                { "stateChange", 1 },
                { "isOpen", 2 },
                { "isToggled", 3 },
                { "isBroken", 4 },
                { "isFilledWithLiquid", 5 },
                { "isDirty", 6 },
                { "isCooked", 7 },
                { "isSliced", 8 },
                { "isUsedUp", 9 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("objectType"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("stateChange"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isOpen"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isToggled"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isBroken"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isFilledWithLiquid"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isDirty"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isCooked"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isSliced"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isUsedUp"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::SetObjectStates value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(10);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.objectType, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.stateChange, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.isOpen);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.Write(value.isToggled);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.Write(value.isBroken);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.Write(value.isFilledWithLiquid);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.Write(value.isDirty);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.Write(value.isCooked);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.Write(value.isSliced);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.Write(value.isUsedUp);
        }

        public global::SetObjectStates Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __objectType__ = default(string);
            var __stateChange__ = default(string);
            var __isOpen__ = default(bool);
            var __isToggled__ = default(bool);
            var __isBroken__ = default(bool);
            var __isFilledWithLiquid__ = default(bool);
            var __isDirty__ = default(bool);
            var __isCooked__ = default(bool);
            var __isSliced__ = default(bool);
            var __isUsedUp__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __objectType__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __stateChange__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __isOpen__ = reader.ReadBoolean();
                        break;
                    case 3:
                        __isToggled__ = reader.ReadBoolean();
                        break;
                    case 4:
                        __isBroken__ = reader.ReadBoolean();
                        break;
                    case 5:
                        __isFilledWithLiquid__ = reader.ReadBoolean();
                        break;
                    case 6:
                        __isDirty__ = reader.ReadBoolean();
                        break;
                    case 7:
                        __isCooked__ = reader.ReadBoolean();
                        break;
                    case 8:
                        __isSliced__ = reader.ReadBoolean();
                        break;
                    case 9:
                        __isUsedUp__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::SetObjectStates();
            ____result.objectType = __objectType__;
            ____result.stateChange = __stateChange__;
            ____result.isOpen = __isOpen__;
            ____result.isToggled = __isToggled__;
            ____result.isBroken = __isBroken__;
            ____result.isFilledWithLiquid = __isFilledWithLiquid__;
            ____result.isDirty = __isDirty__;
            ____result.isCooked = __isCooked__;
            ____result.isSliced = __isSliced__;
            ____result.isUsedUp = __isUsedUp__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
