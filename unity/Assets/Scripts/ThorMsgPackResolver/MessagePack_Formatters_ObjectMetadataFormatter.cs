using UnityEngine;
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ObjectMetadataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ObjectMetadata>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public ObjectMetadataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "name", 0 },
                { "position", 1 },
                { "rotation", 2 },
                { "visible", 3 },
                { "obstructed", 4 },
                { "receptacle", 5 },
                { "toggleable", 6 },
                { "isToggled", 7 },
                { "breakable", 8 },
                { "isBroken", 9 },
                { "canFillWithLiquid", 10 },
                { "isFilledWithLiquid", 11 },
                { "dirtyable", 12 },
                { "isDirty", 13 },
                { "canBeUsedUp", 14 },
                { "isUsedUp", 15 },
                { "cookable", 16 },
                { "isCooked", 17 },
                { "ObjectTemperature", 18 },
                { "canChangeTempToHot", 19 },
                { "canChangeTempToCold", 20 },
                { "sliceable", 21 },
                { "isSliced", 22 },
                { "openable", 23 },
                { "isOpen", 24 },
                { "openness", 25 },
                { "pickupable", 26 },
                { "isPickedUp", 27 },
                { "moveable", 28 },
                { "mass", 29 },
                { "salientMaterials", 30 },
                { "receptacleObjectIds", 31 },
                { "distance", 32 },
                { "objectType", 33 },
                { "objectId", 34 },
                { "parentReceptacles", 35 },
                { "isMoving", 36 },
                { "axisAlignedBoundingBox", 37 },
                { "objectOrientedBoundingBox", 38 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("position"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("rotation"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("visible"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("obstructed"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("receptacle"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("toggleable"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isToggled"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("breakable"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isBroken"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("canFillWithLiquid"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isFilledWithLiquid"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("dirtyable"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isDirty"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("canBeUsedUp"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isUsedUp"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("cookable"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isCooked"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ObjectTemperature"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("canChangeTempToHot"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("canChangeTempToCold"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("sliceable"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isSliced"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("openable"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isOpen"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("openness"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("pickupable"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isPickedUp"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("moveable"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("mass"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("salientMaterials"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("receptacleObjectIds"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("distance"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("objectType"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("objectId"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("parentReceptacles"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isMoving"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("axisAlignedBoundingBox"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("objectOrientedBoundingBox"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::ObjectMetadata value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(39);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<Vector3>().Serialize(ref writer, value.position, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<Vector3>().Serialize(ref writer, value.rotation, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.Write(value.visible);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.Write(value.obstructed);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.Write(value.receptacle);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.Write(value.toggleable);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.Write(value.isToggled);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.Write(value.breakable);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.Write(value.isBroken);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.Write(value.canFillWithLiquid);
            writer.WriteRaw(this.____stringByteKeys[11]);
            writer.Write(value.isFilledWithLiquid);
            writer.WriteRaw(this.____stringByteKeys[12]);
            writer.Write(value.dirtyable);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.Write(value.isDirty);
            writer.WriteRaw(this.____stringByteKeys[14]);
            writer.Write(value.canBeUsedUp);
            writer.WriteRaw(this.____stringByteKeys[15]);
            writer.Write(value.isUsedUp);
            writer.WriteRaw(this.____stringByteKeys[16]);
            writer.Write(value.cookable);
            writer.WriteRaw(this.____stringByteKeys[17]);
            writer.Write(value.isCooked);
            writer.WriteRaw(this.____stringByteKeys[18]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ObjectTemperature, options);
            writer.WriteRaw(this.____stringByteKeys[19]);
            writer.Write(value.canChangeTempToHot);
            writer.WriteRaw(this.____stringByteKeys[20]);
            writer.Write(value.canChangeTempToCold);
            writer.WriteRaw(this.____stringByteKeys[21]);
            writer.Write(value.sliceable);
            writer.WriteRaw(this.____stringByteKeys[22]);
            writer.Write(value.isSliced);
            writer.WriteRaw(this.____stringByteKeys[23]);
            writer.Write(value.openable);
            writer.WriteRaw(this.____stringByteKeys[24]);
            writer.Write(value.isOpen);
            writer.WriteRaw(this.____stringByteKeys[25]);
            writer.Write(value.openness);
            writer.WriteRaw(this.____stringByteKeys[26]);
            writer.Write(value.pickupable);
            writer.WriteRaw(this.____stringByteKeys[27]);
            writer.Write(value.isPickedUp);
            writer.WriteRaw(this.____stringByteKeys[28]);
            writer.Write(value.moveable);
            writer.WriteRaw(this.____stringByteKeys[29]);
            writer.Write(value.mass);
            writer.WriteRaw(this.____stringByteKeys[30]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.salientMaterials, options);
            writer.WriteRaw(this.____stringByteKeys[31]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.receptacleObjectIds, options);
            writer.WriteRaw(this.____stringByteKeys[32]);
            writer.Write(value.distance);
            writer.WriteRaw(this.____stringByteKeys[33]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.objectType, options);
            writer.WriteRaw(this.____stringByteKeys[34]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.objectId, options);
            writer.WriteRaw(this.____stringByteKeys[35]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.parentReceptacles, options);
            writer.WriteRaw(this.____stringByteKeys[36]);
            writer.Write(value.isMoving);
            writer.WriteRaw(this.____stringByteKeys[37]);
            formatterResolver.GetFormatterWithVerify<global::AxisAlignedBoundingBox>().Serialize(ref writer, value.axisAlignedBoundingBox, options);
            writer.WriteRaw(this.____stringByteKeys[38]);
            formatterResolver.GetFormatterWithVerify<global::ObjectOrientedBoundingBox>().Serialize(ref writer, value.objectOrientedBoundingBox, options);
        }

        public global::ObjectMetadata Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __name__ = default(string);
            var __position__ = default(Vector3);
            var __rotation__ = default(Vector3);
            var __visible__ = default(bool);
            var __obstructed__ = default(bool);
            var __receptacle__ = default(bool);
            var __toggleable__ = default(bool);
            var __isToggled__ = default(bool);
            var __breakable__ = default(bool);
            var __isBroken__ = default(bool);
            var __canFillWithLiquid__ = default(bool);
            var __isFilledWithLiquid__ = default(bool);
            var __dirtyable__ = default(bool);
            var __isDirty__ = default(bool);
            var __canBeUsedUp__ = default(bool);
            var __isUsedUp__ = default(bool);
            var __cookable__ = default(bool);
            var __isCooked__ = default(bool);
            var __ObjectTemperature__ = default(string);
            var __canChangeTempToHot__ = default(bool);
            var __canChangeTempToCold__ = default(bool);
            var __sliceable__ = default(bool);
            var __isSliced__ = default(bool);
            var __openable__ = default(bool);
            var __isOpen__ = default(bool);
            var __openness__ = default(float);
            var __pickupable__ = default(bool);
            var __isPickedUp__ = default(bool);
            var __moveable__ = default(bool);
            var __mass__ = default(float);
            var __salientMaterials__ = default(string[]);
            var __receptacleObjectIds__ = default(string[]);
            var __distance__ = default(float);
            var __objectType__ = default(string);
            var __objectId__ = default(string);
            var __parentReceptacles__ = default(string[]);
            var __isMoving__ = default(bool);
            var __axisAlignedBoundingBox__ = default(global::AxisAlignedBoundingBox);
            var __objectOrientedBoundingBox__ = default(global::ObjectOrientedBoundingBox);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __position__ = formatterResolver.GetFormatterWithVerify<Vector3>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __rotation__ = formatterResolver.GetFormatterWithVerify<Vector3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __visible__ = reader.ReadBoolean();
                        break;
                    case 4:
                        __obstructed__ = reader.ReadBoolean();
                        break;
                    case 5:
                        __receptacle__ = reader.ReadBoolean();
                        break;
                    case 6:
                        __toggleable__ = reader.ReadBoolean();
                        break;
                    case 7:
                        __isToggled__ = reader.ReadBoolean();
                        break;
                    case 8:
                        __breakable__ = reader.ReadBoolean();
                        break;
                    case 9:
                        __isBroken__ = reader.ReadBoolean();
                        break;
                    case 10:
                        __canFillWithLiquid__ = reader.ReadBoolean();
                        break;
                    case 11:
                        __isFilledWithLiquid__ = reader.ReadBoolean();
                        break;
                    case 12:
                        __dirtyable__ = reader.ReadBoolean();
                        break;
                    case 13:
                        __isDirty__ = reader.ReadBoolean();
                        break;
                    case 14:
                        __canBeUsedUp__ = reader.ReadBoolean();
                        break;
                    case 15:
                        __isUsedUp__ = reader.ReadBoolean();
                        break;
                    case 16:
                        __cookable__ = reader.ReadBoolean();
                        break;
                    case 17:
                        __isCooked__ = reader.ReadBoolean();
                        break;
                    case 18:
                        __ObjectTemperature__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __canChangeTempToHot__ = reader.ReadBoolean();
                        break;
                    case 20:
                        __canChangeTempToCold__ = reader.ReadBoolean();
                        break;
                    case 21:
                        __sliceable__ = reader.ReadBoolean();
                        break;
                    case 22:
                        __isSliced__ = reader.ReadBoolean();
                        break;
                    case 23:
                        __openable__ = reader.ReadBoolean();
                        break;
                    case 24:
                        __isOpen__ = reader.ReadBoolean();
                        break;
                    case 25:
                        __openness__ = reader.ReadSingle();
                        break;
                    case 26:
                        __pickupable__ = reader.ReadBoolean();
                        break;
                    case 27:
                        __isPickedUp__ = reader.ReadBoolean();
                        break;
                    case 28:
                        __moveable__ = reader.ReadBoolean();
                        break;
                    case 29:
                        __mass__ = reader.ReadSingle();
                        break;
                    case 30:
                        __salientMaterials__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, options);
                        break;
                    case 31:
                        __receptacleObjectIds__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, options);
                        break;
                    case 32:
                        __distance__ = reader.ReadSingle();
                        break;
                    case 33:
                        __objectType__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 34:
                        __objectId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 35:
                        __parentReceptacles__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, options);
                        break;
                    case 36:
                        __isMoving__ = reader.ReadBoolean();
                        break;
                    case 37:
                        __axisAlignedBoundingBox__ = formatterResolver.GetFormatterWithVerify<global::AxisAlignedBoundingBox>().Deserialize(ref reader, options);
                        break;
                    case 38:
                        __objectOrientedBoundingBox__ = formatterResolver.GetFormatterWithVerify<global::ObjectOrientedBoundingBox>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ObjectMetadata();
            ____result.name = __name__;
            ____result.position = __position__;
            ____result.rotation = __rotation__;
            ____result.visible = __visible__;
            ____result.obstructed = __obstructed__;
            ____result.receptacle = __receptacle__;
            ____result.toggleable = __toggleable__;
            ____result.isToggled = __isToggled__;
            ____result.breakable = __breakable__;
            ____result.isBroken = __isBroken__;
            ____result.canFillWithLiquid = __canFillWithLiquid__;
            ____result.isFilledWithLiquid = __isFilledWithLiquid__;
            ____result.dirtyable = __dirtyable__;
            ____result.isDirty = __isDirty__;
            ____result.canBeUsedUp = __canBeUsedUp__;
            ____result.isUsedUp = __isUsedUp__;
            ____result.cookable = __cookable__;
            ____result.isCooked = __isCooked__;
            ____result.ObjectTemperature = __ObjectTemperature__;
            ____result.canChangeTempToHot = __canChangeTempToHot__;
            ____result.canChangeTempToCold = __canChangeTempToCold__;
            ____result.sliceable = __sliceable__;
            ____result.isSliced = __isSliced__;
            ____result.openable = __openable__;
            ____result.isOpen = __isOpen__;
            ____result.openness = __openness__;
            ____result.pickupable = __pickupable__;
            ____result.isPickedUp = __isPickedUp__;
            ____result.moveable = __moveable__;
            ____result.mass = __mass__;
            ____result.salientMaterials = __salientMaterials__;
            ____result.receptacleObjectIds = __receptacleObjectIds__;
            ____result.distance = __distance__;
            ____result.objectType = __objectType__;
            ____result.objectId = __objectId__;
            ____result.parentReceptacles = __parentReceptacles__;
            ____result.isMoving = __isMoving__;
            ____result.axisAlignedBoundingBox = __axisAlignedBoundingBox__;
            ____result.objectOrientedBoundingBox = __objectOrientedBoundingBox__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
