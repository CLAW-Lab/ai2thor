using UnityEngine;
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class MetadataWrapperFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MetadataWrapper>
    {
        global::MessagePack.Formatters.ActionReturnFormatter __actionReturnCustomFormatter__ = new global::MessagePack.Formatters.ActionReturnFormatter();


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public MetadataWrapperFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "objects", 0 },
                { "isSceneAtRest", 1 },
                { "agent", 2 },
                { "hand", 3 },
                { "arm", 4 },
                { "fov", 5 },
                { "cameraPosition", 6 },
                { "cameraOrthSize", 7 },
                { "thirdPartyCameras", 8 },
                { "collided", 9 },
                { "collidedObjects", 10 },
                { "inventoryObjects", 11 },
                { "sceneName", 12 },
                { "lastAction", 13 },
                { "errorMessage", 14 },
                { "errorCode", 15 },
                { "lastActionSuccess", 16 },
                { "screenWidth", 17 },
                { "screenHeight", 18 },
                { "agentId", 19 },
                { "colors", 20 },
                { "colorBounds", 21 },
                { "flatSurfacesOnGrid", 22 },
                { "distances", 23 },
                { "normals", 24 },
                { "isOpenableGrid", 25 },
                { "segmentedObjectIds", 26 },
                { "objectIdsInBox", 27 },
                { "actionIntReturn", 28 },
                { "actionFloatReturn", 29 },
                { "actionStringsReturn", 30 },
                { "actionFloatsReturn", 31 },
                { "actionVector3sReturn", 32 },
                { "visibleRange", 33 },
                { "currentTime", 34 },
                { "sceneBounds", 35 },
                { "updateCount", 36 },
                { "fixedUpdateCount", 37 },
                { "actionReturn", 38 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("objects"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isSceneAtRest"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("agent"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("hand"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("arm"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("fov"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("cameraPosition"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("cameraOrthSize"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("thirdPartyCameras"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("collided"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("collidedObjects"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("inventoryObjects"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("sceneName"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("lastAction"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("errorMessage"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("errorCode"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("lastActionSuccess"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("screenWidth"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("screenHeight"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("agentId"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("colors"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("colorBounds"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("flatSurfacesOnGrid"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("distances"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("normals"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("isOpenableGrid"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("segmentedObjectIds"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("objectIdsInBox"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("actionIntReturn"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("actionFloatReturn"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("actionStringsReturn"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("actionFloatsReturn"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("actionVector3sReturn"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("visibleRange"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("currentTime"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("sceneBounds"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("updateCount"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("fixedUpdateCount"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("actionReturn"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::MetadataWrapper value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(39);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::ObjectMetadata[]>().Serialize(ref writer, value.objects, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.isSceneAtRest);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::AgentMetadata>().Serialize(ref writer, value.agent, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::HandMetadata>().Serialize(ref writer, value.hand, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::ArmMetadata>().Serialize(ref writer, value.arm, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.Write(value.fov);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<Vector3>().Serialize(ref writer, value.cameraPosition, options);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.Write(value.cameraOrthSize);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::ThirdPartyCameraMetadata[]>().Serialize(ref writer, value.thirdPartyCameras, options);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.Write(value.collided);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.collidedObjects, options);
            writer.WriteRaw(this.____stringByteKeys[11]);
            formatterResolver.GetFormatterWithVerify<global::InventoryObject[]>().Serialize(ref writer, value.inventoryObjects, options);
            writer.WriteRaw(this.____stringByteKeys[12]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.sceneName, options);
            writer.WriteRaw(this.____stringByteKeys[13]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.lastAction, options);
            writer.WriteRaw(this.____stringByteKeys[14]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.errorMessage, options);
            writer.WriteRaw(this.____stringByteKeys[15]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.errorCode, options);
            writer.WriteRaw(this.____stringByteKeys[16]);
            writer.Write(value.lastActionSuccess);
            writer.WriteRaw(this.____stringByteKeys[17]);
            writer.Write(value.screenWidth);
            writer.WriteRaw(this.____stringByteKeys[18]);
            writer.Write(value.screenHeight);
            writer.WriteRaw(this.____stringByteKeys[19]);
            writer.Write(value.agentId);
            writer.WriteRaw(this.____stringByteKeys[20]);
            formatterResolver.GetFormatterWithVerify<global::ColorId[]>().Serialize(ref writer, value.colors, options);
            writer.WriteRaw(this.____stringByteKeys[21]);
            formatterResolver.GetFormatterWithVerify<global::ColorBounds[]>().Serialize(ref writer, value.colorBounds, options);
            writer.WriteRaw(this.____stringByteKeys[22]);
            formatterResolver.GetFormatterWithVerify<float[]>().Serialize(ref writer, value.flatSurfacesOnGrid, options);
            writer.WriteRaw(this.____stringByteKeys[23]);
            formatterResolver.GetFormatterWithVerify<float[]>().Serialize(ref writer, value.distances, options);
            writer.WriteRaw(this.____stringByteKeys[24]);
            formatterResolver.GetFormatterWithVerify<float[]>().Serialize(ref writer, value.normals, options);
            writer.WriteRaw(this.____stringByteKeys[25]);
            formatterResolver.GetFormatterWithVerify<bool[]>().Serialize(ref writer, value.isOpenableGrid, options);
            writer.WriteRaw(this.____stringByteKeys[26]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.segmentedObjectIds, options);
            writer.WriteRaw(this.____stringByteKeys[27]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.objectIdsInBox, options);
            writer.WriteRaw(this.____stringByteKeys[28]);
            writer.Write(value.actionIntReturn);
            writer.WriteRaw(this.____stringByteKeys[29]);
            writer.Write(value.actionFloatReturn);
            writer.WriteRaw(this.____stringByteKeys[30]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.actionStringsReturn, options);
            writer.WriteRaw(this.____stringByteKeys[31]);
            formatterResolver.GetFormatterWithVerify<float[]>().Serialize(ref writer, value.actionFloatsReturn, options);
            writer.WriteRaw(this.____stringByteKeys[32]);
            formatterResolver.GetFormatterWithVerify<Vector3[]>().Serialize(ref writer, value.actionVector3sReturn, options);
            writer.WriteRaw(this.____stringByteKeys[33]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<Vector3>>().Serialize(ref writer, value.visibleRange, options);
            writer.WriteRaw(this.____stringByteKeys[34]);
            writer.Write(value.currentTime);
            writer.WriteRaw(this.____stringByteKeys[35]);
            formatterResolver.GetFormatterWithVerify<global::SceneBounds>().Serialize(ref writer, value.sceneBounds, options);
            writer.WriteRaw(this.____stringByteKeys[36]);
            writer.Write(value.updateCount);
            writer.WriteRaw(this.____stringByteKeys[37]);
            writer.Write(value.fixedUpdateCount);
            writer.WriteRaw(this.____stringByteKeys[38]);
            this.__actionReturnCustomFormatter__.Serialize(ref writer, value.actionReturn, options);
        }

        public global::MetadataWrapper Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __objects__ = default(global::ObjectMetadata[]);
            var __isSceneAtRest__ = default(bool);
            var __agent__ = default(global::AgentMetadata);
            var __hand__ = default(global::HandMetadata);
            var __arm__ = default(global::ArmMetadata);
            var __fov__ = default(float);
            var __cameraPosition__ = default(Vector3);
            var __cameraOrthSize__ = default(float);
            var __thirdPartyCameras__ = default(global::ThirdPartyCameraMetadata[]);
            var __collided__ = default(bool);
            var __collidedObjects__ = default(string[]);
            var __inventoryObjects__ = default(global::InventoryObject[]);
            var __sceneName__ = default(string);
            var __lastAction__ = default(string);
            var __errorMessage__ = default(string);
            var __errorCode__ = default(string);
            var __lastActionSuccess__ = default(bool);
            var __screenWidth__ = default(int);
            var __screenHeight__ = default(int);
            var __agentId__ = default(int);
            var __colors__ = default(global::ColorId[]);
            var __colorBounds__ = default(global::ColorBounds[]);
            var __flatSurfacesOnGrid__ = default(float[]);
            var __distances__ = default(float[]);
            var __normals__ = default(float[]);
            var __isOpenableGrid__ = default(bool[]);
            var __segmentedObjectIds__ = default(string[]);
            var __objectIdsInBox__ = default(string[]);
            var __actionIntReturn__ = default(int);
            var __actionFloatReturn__ = default(float);
            var __actionStringsReturn__ = default(string[]);
            var __actionFloatsReturn__ = default(float[]);
            var __actionVector3sReturn__ = default(Vector3[]);
            var __visibleRange__ = default(global::System.Collections.Generic.List<Vector3>);
            var __currentTime__ = default(float);
            var __sceneBounds__ = default(global::SceneBounds);
            var __updateCount__ = default(int);
            var __fixedUpdateCount__ = default(int);
            var __actionReturn__ = default(object);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __objects__ = formatterResolver.GetFormatterWithVerify<global::ObjectMetadata[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __isSceneAtRest__ = reader.ReadBoolean();
                        break;
                    case 2:
                        __agent__ = formatterResolver.GetFormatterWithVerify<global::AgentMetadata>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __hand__ = formatterResolver.GetFormatterWithVerify<global::HandMetadata>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __arm__ = formatterResolver.GetFormatterWithVerify<global::ArmMetadata>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __fov__ = reader.ReadSingle();
                        break;
                    case 6:
                        __cameraPosition__ = formatterResolver.GetFormatterWithVerify<Vector3>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __cameraOrthSize__ = reader.ReadSingle();
                        break;
                    case 8:
                        __thirdPartyCameras__ = formatterResolver.GetFormatterWithVerify<global::ThirdPartyCameraMetadata[]>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __collided__ = reader.ReadBoolean();
                        break;
                    case 10:
                        __collidedObjects__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __inventoryObjects__ = formatterResolver.GetFormatterWithVerify<global::InventoryObject[]>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __sceneName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __lastAction__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __errorMessage__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __errorCode__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __lastActionSuccess__ = reader.ReadBoolean();
                        break;
                    case 17:
                        __screenWidth__ = reader.ReadInt32();
                        break;
                    case 18:
                        __screenHeight__ = reader.ReadInt32();
                        break;
                    case 19:
                        __agentId__ = reader.ReadInt32();
                        break;
                    case 20:
                        __colors__ = formatterResolver.GetFormatterWithVerify<global::ColorId[]>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        __colorBounds__ = formatterResolver.GetFormatterWithVerify<global::ColorBounds[]>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __flatSurfacesOnGrid__ = formatterResolver.GetFormatterWithVerify<float[]>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __distances__ = formatterResolver.GetFormatterWithVerify<float[]>().Deserialize(ref reader, options);
                        break;
                    case 24:
                        __normals__ = formatterResolver.GetFormatterWithVerify<float[]>().Deserialize(ref reader, options);
                        break;
                    case 25:
                        __isOpenableGrid__ = formatterResolver.GetFormatterWithVerify<bool[]>().Deserialize(ref reader, options);
                        break;
                    case 26:
                        __segmentedObjectIds__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, options);
                        break;
                    case 27:
                        __objectIdsInBox__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, options);
                        break;
                    case 28:
                        __actionIntReturn__ = reader.ReadInt32();
                        break;
                    case 29:
                        __actionFloatReturn__ = reader.ReadSingle();
                        break;
                    case 30:
                        __actionStringsReturn__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, options);
                        break;
                    case 31:
                        __actionFloatsReturn__ = formatterResolver.GetFormatterWithVerify<float[]>().Deserialize(ref reader, options);
                        break;
                    case 32:
                        __actionVector3sReturn__ = formatterResolver.GetFormatterWithVerify<Vector3[]>().Deserialize(ref reader, options);
                        break;
                    case 33:
                        __visibleRange__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<Vector3>>().Deserialize(ref reader, options);
                        break;
                    case 34:
                        __currentTime__ = reader.ReadSingle();
                        break;
                    case 35:
                        __sceneBounds__ = formatterResolver.GetFormatterWithVerify<global::SceneBounds>().Deserialize(ref reader, options);
                        break;
                    case 36:
                        __updateCount__ = reader.ReadInt32();
                        break;
                    case 37:
                        __fixedUpdateCount__ = reader.ReadInt32();
                        break;
                    case 38:
                        __actionReturn__ = this.__actionReturnCustomFormatter__.Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MetadataWrapper();
            ____result.objects = __objects__;
            ____result.isSceneAtRest = __isSceneAtRest__;
            ____result.agent = __agent__;
            ____result.hand = __hand__;
            ____result.arm = __arm__;
            ____result.fov = __fov__;
            ____result.cameraPosition = __cameraPosition__;
            ____result.cameraOrthSize = __cameraOrthSize__;
            ____result.thirdPartyCameras = __thirdPartyCameras__;
            ____result.collided = __collided__;
            ____result.collidedObjects = __collidedObjects__;
            ____result.inventoryObjects = __inventoryObjects__;
            ____result.sceneName = __sceneName__;
            ____result.lastAction = __lastAction__;
            ____result.errorMessage = __errorMessage__;
            ____result.errorCode = __errorCode__;
            ____result.lastActionSuccess = __lastActionSuccess__;
            ____result.screenWidth = __screenWidth__;
            ____result.screenHeight = __screenHeight__;
            ____result.agentId = __agentId__;
            ____result.colors = __colors__;
            ____result.colorBounds = __colorBounds__;
            ____result.flatSurfacesOnGrid = __flatSurfacesOnGrid__;
            ____result.distances = __distances__;
            ____result.normals = __normals__;
            ____result.isOpenableGrid = __isOpenableGrid__;
            ____result.segmentedObjectIds = __segmentedObjectIds__;
            ____result.objectIdsInBox = __objectIdsInBox__;
            ____result.actionIntReturn = __actionIntReturn__;
            ____result.actionFloatReturn = __actionFloatReturn__;
            ____result.actionStringsReturn = __actionStringsReturn__;
            ____result.actionFloatsReturn = __actionFloatsReturn__;
            ____result.actionVector3sReturn = __actionVector3sReturn__;
            ____result.visibleRange = __visibleRange__;
            ____result.currentTime = __currentTime__;
            ____result.sceneBounds = __sceneBounds__;
            ____result.updateCount = __updateCount__;
            ____result.fixedUpdateCount = __fixedUpdateCount__;
            ____result.actionReturn = __actionReturn__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
