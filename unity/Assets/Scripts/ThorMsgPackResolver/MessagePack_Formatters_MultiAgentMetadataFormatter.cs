using UnityEngine;
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class MultiAgentMetadataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MultiAgentMetadata>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public MultiAgentMetadataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "agents", 0 },
                { "thirdPartyCameras", 1 },
                { "activeAgentId", 2 },
                { "sequenceId", 3 },
                { "fixedUpdateCount", 4 },
                { "updateCount", 5 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("agents"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("thirdPartyCameras"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("activeAgentId"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("sequenceId"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("fixedUpdateCount"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("updateCount"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::MultiAgentMetadata value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::MetadataWrapper[]>().Serialize(ref writer, value.agents, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::ThirdPartyCameraMetadata[]>().Serialize(ref writer, value.thirdPartyCameras, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.activeAgentId);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.Write(value.sequenceId);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.Write(value.fixedUpdateCount);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.Write(value.updateCount);
        }

        public global::MultiAgentMetadata Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __agents__ = default(global::MetadataWrapper[]);
            var __thirdPartyCameras__ = default(global::ThirdPartyCameraMetadata[]);
            var __activeAgentId__ = default(int);
            var __sequenceId__ = default(int);
            var __fixedUpdateCount__ = default(int);
            var __updateCount__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __agents__ = formatterResolver.GetFormatterWithVerify<global::MetadataWrapper[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __thirdPartyCameras__ = formatterResolver.GetFormatterWithVerify<global::ThirdPartyCameraMetadata[]>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __activeAgentId__ = reader.ReadInt32();
                        break;
                    case 3:
                        __sequenceId__ = reader.ReadInt32();
                        break;
                    case 4:
                        __fixedUpdateCount__ = reader.ReadInt32();
                        break;
                    case 5:
                        __updateCount__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MultiAgentMetadata();
            ____result.agents = __agents__;
            ____result.thirdPartyCameras = __thirdPartyCameras__;
            ____result.activeAgentId = __activeAgentId__;
            ____result.sequenceId = __sequenceId__;
            ____result.fixedUpdateCount = __fixedUpdateCount__;
            ____result.updateCount = __updateCount__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
